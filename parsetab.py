
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "block_listFLOAT ID INT INTEGER LOWER REAL VECTOR\n            number : INTEGER\n                    | FLOAT\n        \n            expression : number\n                        | ID\n        \n            expression_list : expression_list ',' expression\n                            | expression\n        \n            arraydef : '[' expression ']'\n                    | empty\n        \n            lower : '<' LOWER '=' number '>'\n                    | empty\n        \n            type : INT  lower arraydef\n                | REAL  lower arraydef\n                | VECTOR  lower arraydef\n        \n            statement : type ID ';'\n                      | ID '~' ID '(' expression_list ')' ';'\n        \n            statement_list : statement_list statement\n                            | statement\n        \n            block : ID '{' statement_list '}'\n        \n            block_list : block_list block\n                        | block\n        empty :"
    
_lr_action_items = {'ID':([0,1,2,4,5,7,8,9,10,11,12,13,14,15,17,19,20,21,23,24,25,26,28,29,30,39,42,43,44,],[3,3,-20,-19,6,6,-17,16,-21,-21,-21,22,-18,-16,-21,-10,-21,-21,-14,-11,33,-8,-12,-13,33,-7,33,-9,-15,]),'$end':([1,2,4,14,],[0,-20,-19,-18,]),'{':([3,],[5,]),'INT':([5,7,8,15,23,44,],[10,10,-17,-16,-14,-15,]),'REAL':([5,7,8,15,23,44,],[11,11,-17,-16,-14,-15,]),'VECTOR':([5,7,8,15,23,44,],[12,12,-17,-16,-14,-15,]),'~':([6,],[13,]),'}':([7,8,15,23,44,],[14,-17,-16,-14,-15,]),'<':([10,11,12,],[18,18,18,]),'[':([10,11,12,17,19,20,21,43,],[-21,-21,-21,25,-10,25,25,-9,]),';':([16,41,],[23,44,]),'LOWER':([18,],[27,]),'(':([22,],[30,]),'INTEGER':([25,30,36,42,],[34,34,34,34,]),'FLOAT':([25,30,36,42,],[35,35,35,35,]),'=':([27,],[36,]),']':([31,32,33,34,35,],[39,-3,-4,-1,-2,]),')':([32,33,34,35,37,38,45,],[-3,-4,-1,-2,41,-6,-5,]),',':([32,33,34,35,37,38,45,],[-3,-4,-1,-2,42,-6,-5,]),'>':([34,35,40,],[-1,-2,43,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'block_list':([0,],[1,]),'block':([0,1,],[2,4,]),'statement_list':([5,],[7,]),'statement':([5,7,],[8,15,]),'type':([5,7,],[9,9,]),'lower':([10,11,12,],[17,20,21,]),'empty':([10,11,12,17,20,21,],[19,19,19,26,26,26,]),'arraydef':([17,20,21,],[24,28,29,]),'expression':([25,30,42,],[31,38,45,]),'number':([25,30,36,42,],[32,32,40,32,]),'expression_list':([30,],[37,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> block_list","S'",1,None,None,None),
  ('number -> INTEGER','number',1,'p_number','parser.py',16),
  ('number -> FLOAT','number',1,'p_number','parser.py',17),
  ('expression -> number','expression',1,'p_expression','parser.py',23),
  ('expression -> ID','expression',1,'p_expression','parser.py',24),
  ('expression_list -> expression_list , expression','expression_list',3,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('arraydef -> [ expression ]','arraydef',3,'p_arraydef','parser.py',46),
  ('arraydef -> empty','arraydef',1,'p_arraydef','parser.py',47),
  ('lower -> < LOWER = number >','lower',5,'p_lower','parser.py',56),
  ('lower -> empty','lower',1,'p_lower','parser.py',57),
  ('type -> INT lower arraydef','type',3,'p_type','parser.py',66),
  ('type -> REAL lower arraydef','type',3,'p_type','parser.py',67),
  ('type -> VECTOR lower arraydef','type',3,'p_type','parser.py',68),
  ('statement -> type ID ;','statement',3,'p_statement','parser.py',74),
  ('statement -> ID ~ ID ( expression_list ) ;','statement',7,'p_statement','parser.py',75),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',89),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',90),
  ('block -> ID { statement_list }','block',4,'p_block','parser.py',102),
  ('block_list -> block_list block','block_list',2,'p_block_list','parser.py',108),
  ('block_list -> block','block_list',1,'p_block_list','parser.py',109),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',120),
]
